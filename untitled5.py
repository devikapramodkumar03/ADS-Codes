# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xzur8pAWV5Js8-u8lDZvQMy0KF9zdmul
"""

print('hello world',2+2,'this is python',sep=" ")

# 1. Print your full name with an underscore between your first and last name using sep parameter.
print('Devika','Pramod','Kumar',sep="_")

# Print your full name with an underscore between your first and last name using end parameter.
print('Devika','Pramod','Kumar',end="_")

l1=[1,2,3,'apple',6]
print(l1)
print(type(l1))
print('\n')

t1=(1,2,3,'apple',6)
print(t1)
print(type(t1))
print('\n')

r1=range(0,5)
print(r1)
print(type(r1))

a=60
b=13
print(a%b)
print(a|b)
print(a*b)
print(~a)
print(a^b)
print(a<<2)
print(a>>2)

lenght=input('enter length: ')
breadth=input('enter breadth: ')
area=int(lenght)*int(breadth)
print('area of rectangle is: ',area)

num1=10
num2=3
print(num1%num2)
print(num1/num2)

name=input('enter name: ')
age=int(input('enter age: '))
print('hello',name,'you age next year is',age+1,'years old')

# calculator
a=int(input('enter number: '))
b=int(input('enter number: '))
operation=input('enter operation: ')

if operation == '+':
    print('addition: ', (a + b))
elif operation == '-':
    print('subtraction: ', (a - b))
elif operation == '*':
    print('multiplication: ', (a * b))
elif operation == '/':
    print('division: ', (a / b))
else:
    print('invalid operation')

# write a code that prints whether the customer can buy the mobile phone based on his budget
# input budget
# mobile price is 30,000
budget=int(input('enter budget: '))
if budget >= 30000:
    print('you can buy the mobile phone')
else:
    print('you cannot buy the mobile phone')

storage=int(input('Enter storage: '))
if storage==32:
  print('Price : 15000')
elif storage==64:
  print('Price : 20000')
elif storage==128:
  print('Price : 30000')
elif storage==256:
  print('Price : 40000')
else:
  print('NA')

score1=int(input('enter score: '))
if score1>80: # first round
  print('Eligible for second round')
  score2=int(input('enter score: '))
  if score2>70:
     print('Eligible for third round')
     score3=int(input('enter score: '))
     if score3>60:
      print('SELECTED')
     else:
        print('REJECTED')
  else:
    print('REJECTED')
else:
  print('REJECTED')

marks=int(input('enter marks: '))
if marks>=80:
  print('Group 1')
elif 80>=marks>=60:
  print('Group 2')
elif 60>=marks>=40:
  print('Group 3')
else:
  print('NA')

# login system
username=input('Enter Username:')
if username=="admin":
  password=input('Enter Password: ')
  if password=="12345":
    print('login successful')
  else:
    print('incorrect password')
else:
  print('incorrect username')

price=int(input('Enter price: '))
print('Discount 5% :',price-(price*5/100))
print('Discount 10% :',price-(price*10/100))
print('Discount 15% :',price-(price*15/100))
print('Discount 20% :', price-(price*20/100))

price=int(input('enter price: '))
for i in range(5,21,5):
    print('Dicount',i,'% :',price-(price*i/100))

price=int(input('Enter price: '))
i=5
while(i<21):
  print('Dicount',i,'% :',price-(price*i/100))
  i+=5

# multiplication table
num=int(input('enter number: '))
for i in range(1,11):
    print(i,'*',num,'=',i*num)

# multiplication table
num=int(input('enter number: '))
i=1
while(i<11):
    print(i,'*',num,'=',i*num)
    i+=1

# functions in python
def function_name(parameters):
  ''' code '''

def any_info(name,sysid):
  print('name of student:',name,'system id:',sysid)

any_info('Devika',2023307505)

def discounted_price(price):
  for i in range(5,21,5):
    print('Dicount',i,'% :',price-(price*i/100))

price=int(input('Enter price'))
discounted_price(price)

# Write a function that takes an integer as a parameter and returns True if it's even, and False otherwise.
def isiteven(number):
  print(number%2==0)

number=int(input('enter number'))
isiteven(number)

# Factorial of a number using recursion function.
def factorial(number):
  # 5! 5*4*3*2*1
  if(number==1 or number==0):
    return 1
  else:
    result=number*factorial(number-1)
  return result


fact=int(input('enter number: '))
print(factorial(fact))

# Print the square of each digit in a list: numbers = [1, 2, 3, 4, 5]------------------------Using map function
def squares(num):
  return num**2

result=map(squares,[1,2,3,4,5])
print(list(result))

# Print the even numbers in a list: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]---------------------------------Using filter function
def isiteven(num):
  return num%2==0
result=filter(isiteven,[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(list(result))

# Multiply all the numbers in a list: numbers = [1, 2.8, 3, 4, 5,17,2]----------------------------------Using reduce function
from functools import reduce

def product(num1,num2):
  return num1*num2

result=reduce(product,[1, 2.8, 3, 4, 5,17,2])
print(result)

# Write a Python program to calculate the value of 'a' to the power of 'b' using recursion.
def power(a, b):
    if b == 0:
        return 1
    return a * power(a, b - 1)


a = int(input('Enter a:'))
b = int(input("Enter b:"))
print(f"{a}^{b} = {power(a, b)}")

# Write a Python function to create and print a list where the values are the squares of numbers between 1 and 30
def squares_list():
    return [i**2 for i in range(1, 31)]

print(squares_list())

''' Write a Python program to create a dictionary from two lists without losing duplicate values.
Sample lists: ['Class-V', 'Class-VI', 'Class-VII', 'Class-VIII'], [1, 2, 2, 3]
Expected Output: defaultdict(<class 'set'>, {'Class-V': {1}, 'Class-VI': {2}, 'Class-VII': {2}, 'Class-VIII': {3}}) '''
from collections import defaultdict

def create_dict(keys, values):
    result = defaultdict(set)
    for k, v in zip(keys, values):
        result[k].add(v)
    return result

keys = ['Class-V', 'Class-VI', 'Class-VII', 'Class-VIII']
values = [1, 2, 2, 3]
print(create_dict(keys, values))

import numpy as np

matrix1=np.array([[1,2],[3,4]])
matrix2=np.array([[5,6],[7,8]])
print(matrix1)
print(matrix2)
np.linalg.multi_dot([matrix1,matrix2])
print(matrix1+matrix2)
print(matrix1-matrix2)
print(matrix1*matrix2)
print(matrix1/matrix2)

"""#linear equations
x+2y+3z=10
2x+3y+z=15
x+y+2z=20
"""

A=np.array([[1,2,3],
           [2,3,1],
           [1,1,2]])
B=np.array([10,15,20])
X,Y,Z=np.linalg.solve(A,B)
print(X)
print(Y)
print(Z)

A=np.array([[1,2,3],
           [2,3,1],
           [1,1,2]])
B=np.array([10,15,20])
AINV=np.linalg.inv(A)
print(AINV @ B)  # @: matrix multiplication

matrix1.T # transpose

print(np.max(matrix1))
print(np.min(matrix1))
print(np.sum(matrix1))

# random numbers
rand_mat=np.random.rand(5,5)
print(rand_mat)

print(np.mean(rand_mat))
print(np.std(rand_mat))
# mean is close to 0 while standard deviation is close to 1

# np.random.randint
rand_mat1=np.random.randint(2,6,10)
print(rand_mat1)

# polars library is better replacement for pandas
# fireducks

rand_mat>0

rand_mat[rand_mat>0]

# first two rows with second and third column

import pandas as pd
marks_list= [10,20,30,40,50]
labeled_series=pd.Series(marks_list,index=['A','B','C','D','E'])
labeled_series

labeled_updated=labeled_series+2.5
labeled_updated

print(labeled_updated-labeled_series)

# Pandas dataframe
# a 2d tabular data structure with labeled axes (rows and columns).

student=['Mary','Peter','Susan','Toby','Vishal']
df1=pd.DataFrame(student,columns=['Student'],index=['A','B','C','D','E'])
df1

Grade=['B-','A+','A-','B+','C']
num=[10,11,12,13,14]
roll=[123,124,125,126,127]
students=['Mary','Peter','Susan','Toby','Vishal']
df2=pd.DataFrame({'Student':students,'Grades':Grade,'Num':num,'Roll':roll})
df2

# adding coumns to dataframe
df2['number']=[1,2,3,4,5]
df2

# create a pandas dataframe using random values

import numpy as np
np.random.randn(5,2)

df4=pd.DataFrame(np.random.randn(5,2),columns=['Column 1','Column 2'])
df4 # mean 0 variance 1

df5=pd.DataFrame(np.random.randint(0,100,size=(5,2)),columns=['Column 1','Column 2'])
df5

# extraction
labeled_series[:3]

labeled_series[-2:]

# loc and iloc method
df2.iloc[1:4,1:4]

df2.loc[0:2,'Grades':'Roll']

df2.drop(['Roll','Grades'],axis=1)

df2

# copy function
new_df2=df2.copy()
new_df2.drop(['Num'],axis=1,inplace=True)
print(new_df2) # permenant delete

import pandas as pd

data2=pd.read_csv('StockData.csv')
data2.head()

data3=pd.read_excel('new.xlsx')
data3.head()

data2.isnull().sum() # no null values

data2.dtypes

data2.info()

data3.duplicated().sum()

data2.describe() # descriptive statistics

data3['price'].min()

data3[data3['price']==data3['price'].min()]

data3['price'].max()

data2['stock'].unique()

data2['stock'].nunique()

ata2['stock'].value_counts()

data2['stock'].value_counts(normalize=True)

data2.groupby(['stock'])['price'].sum()

data2.sort_values(by='price') # ascending

data4=pd.read_csv('pred.csv')
data4